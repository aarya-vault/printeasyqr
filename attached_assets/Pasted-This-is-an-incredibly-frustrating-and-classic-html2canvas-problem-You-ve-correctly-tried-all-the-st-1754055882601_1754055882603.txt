This is an incredibly frustrating and classic html2canvas problem. You've correctly tried all the standard layout fixes (flex, float), which proves the issue isn't with your CSS layout code.

The problem is almost certainly a race condition. html2canvas is trying to render the component before the browser has finished its own rendering, which includes loading external assets like web fonts or complex SVG icons.

The Most Likely Solution: Add a Small Delay
When you click "Download," html2canvas runs instantly. If you're using a custom web font (like from Google Fonts, which is common in modern apps), the font file might still be loading. The library captures the page using a default system font, which has different letter spacing and size, causing your perfectly aligned layout to break.

The simplest and most effective solution is to give the browser a fraction of a second to finish its work by adding a tiny delay before calling html2canvas.

Modify your handleDownload function:

Wrap the contents of your try block in a setTimeout. A delay of 200 milliseconds is usually more than enough.

JavaScript

const handleDownload = async () => {
  if (!qrRef.current) return;

  // Add a small delay to allow fonts/SVGs to render fully
  setTimeout(async () => {
    try {
      const canvas = await html2canvas(qrRef.current, {
        backgroundColor: '#FFFFFF',
        scale: 3,
        useCORS: true,
        logging: false,
      });

      const link = document.createElement('a');
      link.download = `PrintEasy_${shop.name.replace(/\s+/g, '_')}_QR.png`;
      link.href = canvas.toDataURL('image/png', 1.0);
      link.click();

      toast({
        title: "QR Code Downloaded",
        description: "The QR code has been saved to your device",
      });
    } catch (error) {
      console.error('Error downloading QR code:', error);
      toast({
        title: "Download Failed",
        description: "Please try again",
        variant: "destructive",
      });
    }
  }, 200); // 200ms delay
};
This delay is imperceptible to the user but gives the browser the time it needs to apply custom fonts and render complex SVGs before html2canvas takes its "picture."

If That Still Fails: The SVG Problem
In your latest code, you've replaced simple text logos with <Printer /> icons from lucide-react. These are complex SVGs, and html2canvas is notoriously bad at rendering them consistently. The delay above should also help with this, but if the issue persists, it points to a fundamental bug in how the library handles those specific icons.

As a final diagnostic step, you could temporarily replace the <Printer /> icons with simple text (like you had originally) to see if the layout magically fixes itself. If it does, you've confirmed the SVGs are the source of the instability.