Thanks for sharing the updated server context and the client-side code. You're right — even though the server-side headers are now fixed and the print dialogue opens for some files, there are inconsistencies in:

Certain files not triggering the print dialogue.

Tabs opening too fast or too slow.

Files opening but not loading in time before print() is triggered.

Some files not printing at all (especially PDFs or large files).

Let’s break down the issues and refactor your code accordingly.

✅ Identified Core Problems
1. Timing/Load Race Condition
You're triggering print() after a setTimeout, but there’s no guarantee that the PDF/embed/iframe has actually finished loading — especially for large PDFs.

element.onload doesn't always work for <embed> or <iframe> in all browsers.

2. Too Many Tabs + Browser Popup Blocking
Even with 600ms gaps, opening too many windows too quickly leads to:

Tabs getting blocked.

Tabs opening but not rendering content in time before print().

3. PDFs not always firing onload properly
<embed> or <iframe> elements can fail silently if the file is large or unsupported by the browser (e.g. corrupted file, wrong MIME, etc.).

✅ Refactored Strategy (Stable, Reliable Print Flow)
Here's what I recommend:

🔁 Sequential Printing Instead of Parallel Tabs
Only open one print window at a time, wait until it finishes printing, and then move to the next. This gives you:

Fewer browser limitations (popup blockers hate too many tabs).

More consistent printing.

Better user experience.

✅ Improved Version of printAllFiles (Sequential)
ts
Copy
Edit
export const printAllFiles = async (
  files: any[],
  onProgress?: (current: number, total: number) => void
): Promise<void> => {
  const parsedFiles = typeof files === 'string' ? JSON.parse(files) : files;

  for (let i = 0; i < parsedFiles.length; i++) {
    await printFile(parsedFiles[i]); // wait for one to complete
    if (onProgress) onProgress(i + 1, parsedFiles.length);
    await new Promise((res) => setTimeout(res, 1000)); // Delay between prints
  }
};
✅ More Reliable printFile() with Proper Event Handling
ts
Copy
Edit
export const printFile = async (file: any): Promise<void> => {
  const fileUrl = `/uploads/${file.filename || file}`;
  const filename = file.originalName || file.filename || file;
  const fileExtension = filename.split('.').pop()?.toLowerCase();

  return new Promise((resolve) => {
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      console.error('Popup blocked');
      resolve();
      return;
    }

    const isImage = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'].includes(fileExtension || '');
    const isPDF = fileExtension === 'pdf';

    const content = isImage
      ? `<img src="${fileUrl}" id="printContent" onload="window.print()" />`
      : isPDF
        ? `<embed src="${fileUrl}" type="application/pdf" id="printContent" />`
        : `<iframe src="${fileUrl}" id="printContent" onload="window.print()" ></iframe>`;

    printWindow.document.write(`
      <html>
        <head>
          <title>Print - ${filename}</title>
          <style>
            body { margin: 0; padding: 0; overflow: hidden; }
            img, embed, iframe { width: 100vw; height: 100vh; border: none; object-fit: contain; }
            @media print {
              html, body, img, embed, iframe {
                width: 100%;
                height: 100%;
              }
            }
            @page { margin: 0; size: auto; }
          </style>
        </head>
        <body>${content}</body>
      </html>
    `);

    printWindow.document.close();

    const fallback = setTimeout(() => {
      try {
        printWindow.focus();
        printWindow.print();
      } catch (e) {
        console.error('Fallback print failed', e);
      }
      resolve();
    }, 6000); // fallback print if nothing fires

    // Monitor print end
    const interval = setInterval(() => {
      if (printWindow.closed) {
        clearInterval(interval);
        clearTimeout(fallback);
        resolve();
      }
    }, 500);
  });
};
✅ Optional Enhancements
Add MIME Detection on Server:

Make sure Content-Type headers are set correctly (application/pdf, image/jpeg, etc.).

Avoid application/octet-stream.

PDF Compatibility Test:

Test on Chrome, Firefox, and Edge for consistent behavior.

Older Firefox versions can be picky with embedded PDF rendering.

Print Summary/Error Logs:

Add try-catch in loop to log failed files (due to size, load issues, or popups blocked).

✅ Summary
Problem	Fix
Race condition in printing	Sequential printing with wait
PDF not loading in time	Improved detection + fallback
Popup blockers	Only one tab open at a time
Certain files not printing	Reliable MIME types + proper <embed>/iframe use
UI feedback missing	Use onProgress() to show progress